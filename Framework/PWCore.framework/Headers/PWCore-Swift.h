// Generated by Apple Swift version 4.2.1 (swiftlang-1000.11.42 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PWCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UIViewController;

/// Configures analytic settings and allows sending of analytic events.
SWIFT_CLASS("_TtC6PWCore16AnalyticsManager")
@interface AnalyticsManager : NSObject
/// Adds a custom analytic event to the cache.
/// \param eventName The name of the analytic event.
///
/// \param parameters The parameters of the analytic event. Default value is <code>nil</code>.
///
- (void)addCustomEventWithEventName:(NSString * _Nonnull)eventName parameters:(NSDictionary<NSString *, NSString *> * _Nullable)parameters;
/// Registers a module with the server.
/// \param name The name of the module.
///
/// \param version The version of the module.
///
- (void)registerModuleWithName:(NSString * _Nonnull)name version:(NSString * _Nonnull)version;
/// Returns the version of the module.
/// \param name The name of the module.
///
///
/// returns:
/// The version of the module.
- (NSString * _Nullable)moduleVersionWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Returns all the registered modules.
///
/// returns:
/// The registered modules and versions.
- (NSDictionary<NSString *, NSString *> * _Nullable)registeredModules SWIFT_WARN_UNUSED_RESULT;
/// Sets the custom screen name that will be provided in screen view events for the given view controller.
/// <ul>
///   <li>
///     This should be called in every view controller’s <code>viewWillAppear</code> method you wish to provide a custom screen name for. It should be placed after the <code>super viewWillAppear</code> call.
///   </li>
/// </ul>
/// \param screenName The custom screen name that will be provided in screen view events. Setting the value to nil will remove the custom screen name for the view controller.
///
/// \param viewController The view controller to apply the custom screen name to.
///
- (void)setScreenNameWithScreenName:(NSString * _Nullable)screenName viewController:(UIViewController * _Nonnull)viewController;
/// Sets the app section that will be provided in screen view events for the given view controller and all subsequent view controllers until changed.
/// <ul>
///   <li>
///     This should be called in the view controller’s <code>viewWillAppear</code> method after the <code>super viewWillAppear</code> call. It will be applied to the current view controller and all view controllers following, until changed.
///   </li>
/// </ul>
/// \param appSection The app section that will be provided in screen view events. Setting the value to nil will remove the app section for the view controller and all subsequent screen view events.
///
/// \param currentViewController The current view controller to apply the app section to.
///
- (void)setAppSectionWithAppSection:(NSString * _Nullable)appSection currentViewController:(UIViewController * _Nonnull)currentViewController;
/// Sets the global parameters that will be provided in screen view events for the given view controller and all subsequent view controllers until changed.
/// <ul>
///   <li>
///     This should be called in the view controller’s <code>viewWillAppear</code> method after the <code>super viewWillAppear</code> call. It will be applied to the current view controller and all view controllers following, until changed.
///   </li>
/// </ul>
/// \param globalParameters The global parameters that will be provided in screen view events. Setting the value to nil will remove the global parameters for the view controller and all subsequent screen view events.
///
/// \param currentViewController The current view controller to apply the global parameters to.
///
- (void)setGlobalParametersWithGlobalParameters:(NSDictionary<NSString *, NSString *> * _Nullable)globalParameters currentViewController:(UIViewController * _Nonnull)currentViewController;
/// Called on viewWillAppear for each view controller. Used internally.
/// \param viewController The view controller .
///
- (void)viewWillAppearWithViewController:(UIViewController * _Nonnull)viewController;
/// Called on viewDidDisappear for each view controller. Used internally.
/// \param viewController The view controller.
///
- (void)viewWillDisappearWithViewController:(UIViewController * _Nonnull)viewController;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Fetches Maas Content Management objects. Updates and deletes content.
SWIFT_CLASS("_TtC6PWCore10CMEManager")
@interface CMEManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end












/// Class used to start and manage the PWCore SDK.
SWIFT_CLASS("_TtC6PWCore4Core")
@interface Core : NSObject
/// PWCore singleton object.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Core * _Nonnull shared;)
+ (Core * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// The device id of the current device.
@property (nonatomic, readonly, copy) NSString * _Nullable deviceId;
/// Used to handle analytics events.
@property (nonatomic, readonly, strong) AnalyticsManager * _Nonnull analyticsManager;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Device class with helper methods to retrieve information about the device.
SWIFT_CLASS("_TtC6PWCore10CoreDevice")
@interface CoreDevice : NSObject
/// IPAddress of the device.
///
/// returns:
/// The ip address for the device. Supports IPv4 and IPv6.
+ (NSString * _Nullable)IPAddress SWIFT_WARN_UNUSED_RESULT;
/// Current time formatted in a server friendly string.
///
/// returns:
/// The current time formatted in a server friendly string.
+ (NSString * _Nonnull)timestamp SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
